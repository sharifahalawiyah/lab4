#include<unistd.h>
#include<arpa/inet.h>
#include <stdio.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>

void func(int sockfd)
{
        char buff[80];
        int n;

        for (;;) {
                bzero(buff, 80);

                read(sockfd, buff, sizeof(buff));
                printf("Client: %s\nYOU   : ", buff);
                bzero(buff, 80);
                n = 0;
                while ((buff[n++] = getchar()) != '\n')
                        ;

                write(sockfd, buff, sizeof(buff));

                if (strncmp("exit", buff, 4) == 0) {
                        printf("\nServer Exiting...\n");
                        printf("--WELCOME TO THE CHATROOM--\n\n");
                        break;
                }
        }
}

int main()
{
        int sockfd, connfd, len;
        struct sockaddr_in servaddr, cli;
  sockfd = socket(AF_INET, SOCK_STREAM, 0);
        if (sockfd == -1) {
                printf("Socket creation failed.\n");
                exit(0);
        }
        else
                printf("Socket successfully created.\n");
        bzero(&servaddr, sizeof(servaddr));
        servaddr.sin_family = AF_INET;
        servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
        servaddr.sin_port = htons(8888);

        if ((bind(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr))) !=>
                printf("Socket bind failed.\n");
                exit(0);
        }
        else
                printf("Socket successfully binded.\n");

        if ((listen(sockfd, 5)) != 0) {
                printf("Listen failed.\n");
                exit(0);
        }
        else
                printf("Server listening...\n");
        len = sizeof(cli);

        connfd = accept(sockfd, (struct sockaddr*)&cli, &len);
        if (connfd < 0) {
                printf("Server acccept failed.\n");
                exit(0);
        }
        else {
                printf("Server acccepted a client. Send a response message t>
                printf("Type [exit] to close the server and chat. \n\n******>
        }

        func(connfd);

        close(sockfd);
}
